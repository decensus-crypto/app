// @ts-nocheck
// eslint-disable
// This file is generated by create-validator-ts
import Ajv from 'ajv';
import type * as apiTypes from './api-types';

export const SCHEMA = {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "PostFormRequestBody": {
            "$ref": "#/definitions/FormInStorage"
        },
        "FormInStorage": {
            "type": "object",
            "properties": {
                "form": {
                    "$ref": "#/definitions/Form"
                },
                "respondentAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "form",
                "respondentAddresses"
            ],
            "additionalProperties": false
        },
        "Form": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Question"
                    }
                }
            },
            "required": [
                "title",
                "description",
                "questions"
            ],
            "additionalProperties": false
        },
        "Question": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "question_body": {
                    "type": "string"
                },
                "question_type": {
                    "$ref": "#/definitions/QuestionType"
                },
                "question_max_rating": {
                    "type": "number"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Option"
                    }
                }
            },
            "required": [
                "id",
                "question_body",
                "question_type",
                "question_max_rating",
                "options"
            ],
            "additionalProperties": false
        },
        "QuestionType": {
            "type": "string",
            "enum": [
                "single_choice",
                "single_choice_dropdown",
                "multi_choice",
                "text",
                "date",
                "rating"
            ]
        },
        "Option": {
            "type": "object",
            "properties": {
                "index": {
                    "type": "number"
                },
                "text": {
                    "type": "string"
                }
            },
            "required": [
                "index",
                "text"
            ],
            "additionalProperties": false
        },
        "PostAnswerDecryptionKeyRequestBody": {
            "$ref": "#/definitions/AnswerDecryptionKeyInStorage"
        },
        "AnswerDecryptionKeyInStorage": {
            "type": "object",
            "properties": {
                "formTitle": {
                    "type": "string"
                },
                "encryptedKey": {
                    "type": "object",
                    "properties": {
                        "encryptedZipBase64": {
                            "type": "string"
                        },
                        "encryptedSymmKeyBase64": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "encryptedZipBase64",
                        "encryptedSymmKeyBase64"
                    ],
                    "additionalProperties": false
                },
                "resultViewerAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "formTitle",
                "encryptedKey",
                "resultViewerAddresses"
            ],
            "additionalProperties": false
        }
    }
};
const ajv = new Ajv({ removeAdditional: true }).addSchema(SCHEMA, "SCHEMA");
export function validatePostFormRequestBody(payload: unknown): apiTypes.PostFormRequestBody {
  /** Schema is defined in {@link SCHEMA.definitions.PostFormRequestBody } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/PostFormRequestBody");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid PostFormRequestBody: ' + ajv.errorsText(validator.errors, {dataVar: "PostFormRequestBody"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isPostFormRequestBody(payload: unknown): payload is apiTypes.PostFormRequestBody {
  try {
    validatePostFormRequestBody(payload);
    return true;
  } catch (error) {
    return false;
  }
}

export function validatePostAnswerDecryptionKeyRequestBody(payload: unknown): apiTypes.PostAnswerDecryptionKeyRequestBody {
  /** Schema is defined in {@link SCHEMA.definitions.PostAnswerDecryptionKeyRequestBody } **/
  const validator = ajv.getSchema("SCHEMA#/definitions/PostAnswerDecryptionKeyRequestBody");
  const valid = validator(payload);
  if (!valid) {
    const error = new Error('Invalid PostAnswerDecryptionKeyRequestBody: ' + ajv.errorsText(validator.errors, {dataVar: "PostAnswerDecryptionKeyRequestBody"}));
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isPostAnswerDecryptionKeyRequestBody(payload: unknown): payload is apiTypes.PostAnswerDecryptionKeyRequestBody {
  try {
    validatePostAnswerDecryptionKeyRequestBody(payload);
    return true;
  } catch (error) {
    return false;
  }
}
