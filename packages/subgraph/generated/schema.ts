// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Answer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Answer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Answer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Answer", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Answer | null {
    return changetype<Answer | null>(store.get("Answer", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get encryptedAnswer(): string {
    let value = this.get("encryptedAnswer");
    return value!.toString();
  }

  set encryptedAnswer(value: string) {
    this.set("encryptedAnswer", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get respondentAddress(): Bytes {
    let value = this.get("respondentAddress");
    return value!.toBytes();
  }

  set respondentAddress(value: Bytes) {
    this.set("respondentAddress", Value.fromBytes(value));
  }

  get mintedTokenId(): i32 {
    let value = this.get("mintedTokenId");
    return value!.toI32();
  }

  set mintedTokenId(value: i32) {
    this.set("mintedTokenId", Value.fromI32(value));
  }
}
